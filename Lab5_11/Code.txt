#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<locale.h>
#include<Windows.h>
#pragma warning (disable:4996)
#pragma region Gloals
//5 define'ов: имя - значение;
char values[10][80];
static char buffer[255];
size_t linesCount;
#pragma endregion
#pragma region File
char ** Read_File(char *filename)
{
	FILE *fp = fopen(filename, "rt");
	if (fp == NULL)
	{
		puts("Открыть файл не удалось\n");
		exit(1);
	}
	else
	{
		char *line = (char*)malloc(sizeof(char) * 255);
		char **lines = (char**)malloc(sizeof(char*) * 1);
		int count = 0;
		while (fgets(line, sizeof(line), fp))
		{
			count++;
			calloc(lines, sizeof(char*) * count);
			lines[count - 1] = (char*)malloc(sizeof(char) * 255);
			strcpy(lines[count - 1], line);
		}
		fclose(fp);
		return lines;
	}
}
char * ReadFromFile(char *filename, int index)
{
	FILE *fp;
	fp = fopen(filename, "rt");
	if (fp == NULL)
	{
		puts("Открыть файл не удалось\n");
		exit(1);
	}
	else
	{
		char *line = (char*)malloc(sizeof(char) * 255);
		//char line[255];
		int i = 0;
		while (fgets(line, 255, fp))
		{
			if (i != index)
			{
				strcpy(line, "");
				i++;
			}
			else
			{
				fclose(fp);
				return line;
			}
		}
		fclose(fp);
	}
}
int GetLinesCount(char*filename)
{
	FILE *fp;
	fp = fopen(filename, "rt");
	if (fp == NULL)
	{
		puts("Открыть файл не удалось\n");
		exit(1);
	}
	else
	{
		char line[255];
		int i = 0;
		while (fgets(line, 255, fp))
			i++;
		fclose(fp);
		return i;
	}
}
void WriteToFile(char*filename, char *line)
{
	FILE *fp;
	fp = fopen(filename, "a+");
	if (fp == NULL)
	{
		puts("Открыть файл не удалось\n");
		exit(1);
	}
	else
	{
		fputs(line, fp);
		fclose(fp);
	}
}
#pragma endregion
#pragma region Defines
char** GetDefineValues(char* str, int counter)
{
	if (strstr(str, "#define") != NULL)
	{

		char *temp = strstr(str, " ");
		while (*temp == ' ')
			temp++;
		while (*temp != ' ')
		{
			static char symbol[1];
			strncpy(symbol, temp, 1);
			strcat(buffer, symbol);
			temp++;
		}
		strcpy(values[counter], buffer);
		while (*temp == ' ')
			temp++;
		strcpy(buffer, "");
		while (*temp != ' ' && *temp != '\n')
		{
			static char symbol[1];
			strncpy(symbol, temp, 1);
			strcat(buffer, symbol);
			temp++;
		}
		strcpy(values[counter + 1], buffer);
		return values;
	}
	return NULL;
}
void GetDefines(char*filename)
{
	int length = GetLinesCount(filename);
	int j = 0;
	for (int j = 0;j < length;j++)
	{
		char*line = ReadFromFile(filename, j);
		if (strstr(line, "#define") != NULL)
		{
			GetDefineValues(line, j);
			j += 2;
		}
	}
}
#pragma endregion
#pragma region Replace
char*ReplaceStr(char *str, char *orig, char *rep)
{
	static char buffer[1024];
	char *p;
	int i = 0;

	if (!(p = strstr(str + i, orig)))
	{
		return str;
	}

	while (str[i])
	{
		if (!(p = strstr(str + i, orig)))
		{
			strcat(buffer, str + i);
			break;
		}
		strncpy(buffer + strlen(buffer), str + i, (p - str) - i);
		buffer[p - str] = '\0';
		strcat(buffer, rep);
		i = (p - str) + strlen(orig);
	}
	return buffer;
}

void Replace(char*infilename, char*outfilename)
{
	//int length = GetLinesCount(infilename);
	//for (int j = 0;j < length;j++)
	//{
	//	char*line = ReadFromFile(infilename, j);

	//	if (strstr(line, "#define") != NULL)
	//	{
	//		GetDefineValues(line);
	//		char *name = values[0], *value = values[1];
	//		for (int i = j + 1;i < length;i++)
	//		{
	//			line = ReadFromFile(infilename, i);
	//			char *line2 = ReplaceStr(line, name, value);
	//			//WriteToFile(outfilename, line2);
	//			printf("%s", line2);
	//		}
	//	}
	//	else
	//		printf("%s", line);

	//}


}
#pragma endregion

void Print(char** values, int n)
{
	for (int i = 0;i < n;i++)
		printf("%s\n", values[i]);
}

int main()
{
	setlocale(LC_ALL, "rus");
	GetDefines("in.txt");
	Replace("in.txt", "out.txt");
	//GetDefineValues("#define      fdskfsdkf  90\n");
	//printf("%s\n", values[0]);
	//printf("%s\n", values[1]);
	system("pause");
}